package RBNLearning;

import java.util.*;
import java.io.*;
import RBNpackage.*;
import RBNgui.*;
import RBNExceptions.*;
import RBNutilities.*;
import RBNinference.*;


public class GradientGraphConstantNode extends GradientGraphProbFormNode{
    
    /** True if this is a parameter to be learned */
    Boolean isUnknown;

    /** The value of this constant if it is known */
    double cval;

    /** Current parameter estimate if isUnknown = true */
    double currentParamVal;

    /** The name of this parameter if isUnknown = true */
    String paramname;

    public GradientGraphConstantNode(GradientGraph gg,ProbForm pf,RelStruc A, Instantiation data)
    throws RBNCompatibilityException
    {
	super(gg,pf,A,data);
	if (((ProbFormConstant)pf).getParamName() != ""){ // This represents an unknown parameter
	    isUnknown = true;
	    cval = 0;
	    currentParamVal = 0.5;
	    value = currentParamVal;
	}
	else{ // This represents a known constant 
	    isUnknown = false;
	    cval = ((ProbFormConstant)pf).getCval();
	    currentParamVal = 0.5;
	}
	paramname = ((ProbFormConstant)pf).getParamName();

	children = null;

	if (!(pf instanceof ProbFormConstant)){
	    System.out.println("Cannot create GradientGraphConstantNode from ProbForm " + pf.asString());
	}
    }
    

    
    public double evaluate(){
	if (!isUnknown){
	    value = cval;
	    return cval;
	}
	else{
	    value = currentParamVal;
	    if (currentParamVal == Double.NaN)
		System.out.println("evaluate constant for  " + this.name()+  " gives " + currentParamVal);
	    return currentParamVal;
	}
    }

    public void evaluateBounds(){
	//	System.out.println("constantnode.evaluateBounds with currentParamVal " + currentParamVal);
	if (!isUnknown){
	    bounds[0]=cval;
	    bounds[1]=cval;
	}
	else{
	    bounds[0]=currentParamVal;
	    bounds[1]=currentParamVal;
	}
    }

    public double evaluateGrad(int param){
	if (isUnknown){
	    if (paramname.equals(thisgg.parameterAt(param))){
		gradient[param] = 1.0;
		return 1.0;
	    }
	    else {
		gradient[param] = 0.0;
		return 0.0;
	    }
	}
	else {
	    gradient[param] = 0.0;
	    return 0.0;
	}
    }


    public String paramname(){
	return paramname;
    }

    public void setCurrentParamVal(double cv){
	currentParamVal = cv;
	/* The following assumes that setCurrentParamVal is only called when 
	 * isUnknown=true and isPartDeriv=false
	 */
	value = currentParamVal;
    }
}
