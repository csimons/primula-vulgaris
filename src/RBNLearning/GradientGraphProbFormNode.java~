package RBNLearning;

import java.util.*;
import java.io.*;
import RBNpackage.*;
import RBNgui.*;
import RBNExceptions.*;
import RBNutilities.*;
import RBNinference.*;

public abstract class GradientGraphProbFormNode extends GradientGraphNode{
    
    /** The ground probability formula that this node represents */
    ProbForm formula; 

//     /** When this node represents the top-level probability formula of a ground 
//      * atom, then truthval gives the truth value of this ground atom in the data
//      * (if this atom is instantiated in the data), or the truth value according to
//      * the current setting of the corresponding indicator node
//      *
//      * truthval = 0 (1) means that ground atom is false (true),
//      * truth val = -1 means that ground atom is un-instantiated
//      *
//      * For nodes not representing a top-level probability formula, this field
//      * is irrelevant.
//      */
//     int truthval;


    public GradientGraphProbFormNode(GradientGraph gg,ProbForm pf,RelStruc A,Instantiation data)
    throws RBNCompatibilityException
    {
	super(gg);
	formula = pf;
// 	truthval = tv;
	dependsOnParam = new boolean[gg.numberOfParameters()];
	for (int i=0; i< dependsOnParam.length; i++){
	    if (pf.dependsOn(gg.parameterAt(i),A,data))
		dependsOnParam[i]=true;
	    else dependsOnParam[i]=false;
	}
    }

    /** dependsOnParam[i] is true if the probform of this node depends on 
     * the i'th parameter, as given by the order defined by gg
     */
    protected boolean[] dependsOnParam;

    public static GradientGraphProbFormNode constructGGPFN(GradientGraph gg,
							   ProbForm pf, 
							   Hashtable allnodes, 
							   RelStruc A, 
							   Instantiation data)
	throws RuntimeException,RBNCompatibilityException
    {
	/* First try to find the GradientGraphProbFormNode in allnodes: */
	if (pf == null) System.out.println("pf is null");
	String key = pf.asString();
// 	if (tv==0)
// 	    key = "1-"+key;
// 	if (tv==-1)
// 	    key = "?"+key;
	Object ggn = allnodes.get(key);
	if (ggn != null)
	    return (GradientGraphProbFormNode)ggn;
	else{
	    GradientGraphProbFormNode result = null;
	    if (pf instanceof ProbFormIndicator)
		result =  new GradientGraphIndicatorNode(gg,pf,A,data);
	    if (pf instanceof ProbFormConstant)
		result =  new GradientGraphConstantNode(gg,pf,A,data);
	    if (pf instanceof ProbFormConvComb)
		result =  new GradientGraphConvCombNode(gg,pf,allnodes,A,data);
	    if (pf instanceof ProbFormCombFunc)
		result =  new GradientGraphCombFuncNode(gg,pf,allnodes,A,data);
// 	    if (pf instanceof ProbFormSFormula)
// 		result =  new GradientGraphSFormulaNode(gg,pf,A,data);
	    allnodes.put(key,result);
	    return result;
	}

    }


 

    /** The name of this node. The name identifies the function represented
     * by a node. 
     */
    public String name(){
	return formula.asString(0);
    }

    public String name(RelStruc A){
	return formula.asString(0,A);
    }

    public boolean dependsOn(int param){
	return dependsOnParam[param];
    }

//     public void setTruthVal(int tv){
// 	truthval = tv;
//     }

//     public int truthval(){
// 	return truthval;
//     }
}
