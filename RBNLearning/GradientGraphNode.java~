package RBNLearning;

import java.util.*;
import java.io.*;
import RBNpackage.*;
import RBNgui.*;
import RBNExceptions.*;
import RBNutilities.*;
import RBNinference.*;

public abstract class GradientGraphNode{
    
    /** The gradient graph that this node belongs to */
    GradientGraph thisgg;

    Vector<GradientGraphProbFormNode> children;

    /** The value returned by the last call of evaluate(sno); null if node not 
     * yet evaluated or method resetValue() has been called */
    Double value;

//     /** The result of the most recent call to evaluatesTo()
//      *  0: evaluatesTo() = 0
//      *  1: evaluatesTo() = 1
//      *  -1: evaluatesTo() = -1
//      *  -2: evaluatesTo() has not been executed in the current
//      * setting of the indicator nodes
//      */
//     int evaluatesToValue;




    
    /** The partial derivatives of this node as returned by the most recent 
     * calls of evaluateGrad(param,sno); null if not yet evaluated or method 
     * resetGrad(param) has been called */
    Double[] gradient;




    public GradientGraphNode(GradientGraph gg){
	thisgg = gg;
	children = new Vector<GradientGraphProbFormNode>();
	value = null;
	gradient = new Double[gg.numberOfParameters()];
	for (int i=0; i< gradient.length; i++)
	    gradient[i]=null;
    }

    public void addToChildren(GradientGraphProbFormNode ggpfn){
	children.add(ggpfn);
    }
 
    /** Evaluate this GradientGraphNode using current values of parameters
     * and the current instantiation for unobserved atoms. Returns the
     * value and sets the value field of the node.
     */
    public abstract double evaluate();

    public abstract double evaluateGrad(int param);

//     /** Returns 0 (1) if this node evaluates to 0 (1) given a current partial
//      * instantiation of the indicator nodes. Returns -1 if the current 
//      * partial instantiation of the indicators does not make this 
//      * node surely 0 or 1 valued.
//      */
//     public abstract int evaluatesTo();


    public abstract void evaluateBounds();

    /** The name of this node. The name identifies the function represented
     * by a node. 
     */
    public abstract String name();

    public abstract String name(RelStruc A);
    
    public double value(){
	return value;
    }

//     public double[] gradient(){
// 	double[] result = new double[gradient.length];
// 	for (int i = 0; i<result.length; i++)
// 	    result[i]=gradient[i];
// 	return result;
//     }

    public Double[] gradient(){
	return gradient;
    }

    public void resetValue(){
	value = null;
    }



//     public void resetEvaluatesToValue(){
// 	evaluatesToValue = -2;
//     }


    public void resetGradient(){
	for (int i = 0; i<gradient.length; i++)
	    gradient[i]=null;
    }


}
